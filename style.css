:root {
  scroll-behavior: smooth; /* Remember to add a section break div at the end, so the browser can scroll far enough
  n.b. that, apparently, there are some js functions like window.scroll that do this. Maybe you could use them, to introduce a 'rush' effect. See this site: https://css-tricks.com/snippets/jquery/smooth-scrolling/*/
  font-family: 'Roboto Mono', monospace;
  overflow: hidden;
}

.sidebar {
  width: 200px;
  height: 100%;
  background: black;
  position: fixed; /* will stay in place when I scroll */
  z-index: 1; /* on top of other elements */
  top: 0; /* at the top of the page */
  left: 0; /* at the left of the page */
  background-color: #111;
  overflow-x: hidden; /* no horizontal scrolling */
  padding-top: 60px; /* so they start below the title */
}

.sidebar p a {
  padding: 6px 8px 6px 16px;
  margin: 0;
  text-decoration: none;
  font-size: 25px;
  color: #FFF;
  display: block;
}

.sidebar p a:hover {
  color: black;
  background-color: white
}

.main {
  margin-left: 200px; /* this needs to be same as sidebar width. Would it be clever to use a variable here? */
  display: flex;
}

.central_area {
  padding: 0px 50px;
}

.selfie {
  width: 50%;
  float: right;
}

.contact_me_bar{
  margin-top: 60px; /* The idea here is that, when you land, the left navbar, introductory text, and contact box all sit on a line, underneath the title. But I've used padding-top, here, because I hope that later, if I make this boxe's position sticky, rather than fixed, it will move later than the rest of the page elements (it will first touch the top of the window, then get pulled along with the contents) */
  margin-right: 10px;
}

.section_break {
  height: 100vh;
}
